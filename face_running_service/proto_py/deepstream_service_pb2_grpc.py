# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import deepstream_service_pb2 as deepstream__service__pb2


class DeepstreamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertCamera = channel.unary_unary(
                '/deepstream_service.DeepstreamService/InsertCamera',
                request_serializer=deepstream__service__pb2.CameraItem.SerializeToString,
                response_deserializer=deepstream__service__pb2.StatusResponse.FromString,
                )
        self.RemoveCamera = channel.unary_unary(
                '/deepstream_service.DeepstreamService/RemoveCamera',
                request_serializer=deepstream__service__pb2.CameraID.SerializeToString,
                response_deserializer=deepstream__service__pb2.StatusResponse.FromString,
                )
        self.RestartCamera = channel.unary_unary(
                '/deepstream_service.DeepstreamService/RestartCamera',
                request_serializer=deepstream__service__pb2.CameraID.SerializeToString,
                response_deserializer=deepstream__service__pb2.StatusResponse.FromString,
                )
        self.UpdateMainImage = channel.unary_unary(
                '/deepstream_service.DeepstreamService/UpdateMainImage',
                request_serializer=deepstream__service__pb2.CameraID.SerializeToString,
                response_deserializer=deepstream__service__pb2.StatusResponse.FromString,
                )
        self.UpdateROI = channel.unary_unary(
                '/deepstream_service.DeepstreamService/UpdateROI',
                request_serializer=deepstream__service__pb2.ROI.SerializeToString,
                response_deserializer=deepstream__service__pb2.StatusResponse.FromString,
                )
        self.GetMainImage = channel.unary_unary(
                '/deepstream_service.DeepstreamService/GetMainImage',
                request_serializer=deepstream__service__pb2.CameraID.SerializeToString,
                response_deserializer=deepstream__service__pb2.MainImage.FromString,
                )
        self.GetCameraStatus = channel.unary_unary(
                '/deepstream_service.DeepstreamService/GetCameraStatus',
                request_serializer=deepstream__service__pb2.CameraID.SerializeToString,
                response_deserializer=deepstream__service__pb2.CameraStatus.FromString,
                )
        self.GetCameraStatusList = channel.unary_unary(
                '/deepstream_service.DeepstreamService/GetCameraStatusList',
                request_serializer=deepstream__service__pb2.Empty.SerializeToString,
                response_deserializer=deepstream__service__pb2.CameraStatusList.FromString,
                )
        self.InsertFace = channel.unary_unary(
                '/deepstream_service.DeepstreamService/InsertFace',
                request_serializer=deepstream__service__pb2.FaceItem.SerializeToString,
                response_deserializer=deepstream__service__pb2.InsertStatusReponse.FromString,
                )
        self.RemoveFace = channel.unary_unary(
                '/deepstream_service.DeepstreamService/RemoveFace',
                request_serializer=deepstream__service__pb2.FaceID.SerializeToString,
                response_deserializer=deepstream__service__pb2.StatusResponse.FromString,
                )
        self.GetFaceIDs = channel.unary_unary(
                '/deepstream_service.DeepstreamService/GetFaceIDs',
                request_serializer=deepstream__service__pb2.Empty.SerializeToString,
                response_deserializer=deepstream__service__pb2.FaceIDs.FromString,
                )


class DeepstreamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InsertCamera(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveCamera(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartCamera(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMainImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateROI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMainImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraStatusList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertFace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFaceIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeepstreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertCamera,
                    request_deserializer=deepstream__service__pb2.CameraItem.FromString,
                    response_serializer=deepstream__service__pb2.StatusResponse.SerializeToString,
            ),
            'RemoveCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveCamera,
                    request_deserializer=deepstream__service__pb2.CameraID.FromString,
                    response_serializer=deepstream__service__pb2.StatusResponse.SerializeToString,
            ),
            'RestartCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartCamera,
                    request_deserializer=deepstream__service__pb2.CameraID.FromString,
                    response_serializer=deepstream__service__pb2.StatusResponse.SerializeToString,
            ),
            'UpdateMainImage': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMainImage,
                    request_deserializer=deepstream__service__pb2.CameraID.FromString,
                    response_serializer=deepstream__service__pb2.StatusResponse.SerializeToString,
            ),
            'UpdateROI': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateROI,
                    request_deserializer=deepstream__service__pb2.ROI.FromString,
                    response_serializer=deepstream__service__pb2.StatusResponse.SerializeToString,
            ),
            'GetMainImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMainImage,
                    request_deserializer=deepstream__service__pb2.CameraID.FromString,
                    response_serializer=deepstream__service__pb2.MainImage.SerializeToString,
            ),
            'GetCameraStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraStatus,
                    request_deserializer=deepstream__service__pb2.CameraID.FromString,
                    response_serializer=deepstream__service__pb2.CameraStatus.SerializeToString,
            ),
            'GetCameraStatusList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraStatusList,
                    request_deserializer=deepstream__service__pb2.Empty.FromString,
                    response_serializer=deepstream__service__pb2.CameraStatusList.SerializeToString,
            ),
            'InsertFace': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertFace,
                    request_deserializer=deepstream__service__pb2.FaceItem.FromString,
                    response_serializer=deepstream__service__pb2.InsertStatusReponse.SerializeToString,
            ),
            'RemoveFace': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFace,
                    request_deserializer=deepstream__service__pb2.FaceID.FromString,
                    response_serializer=deepstream__service__pb2.StatusResponse.SerializeToString,
            ),
            'GetFaceIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFaceIDs,
                    request_deserializer=deepstream__service__pb2.Empty.FromString,
                    response_serializer=deepstream__service__pb2.FaceIDs.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'deepstream_service.DeepstreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeepstreamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InsertCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/InsertCamera',
            deepstream__service__pb2.CameraItem.SerializeToString,
            deepstream__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/RemoveCamera',
            deepstream__service__pb2.CameraID.SerializeToString,
            deepstream__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestartCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/RestartCamera',
            deepstream__service__pb2.CameraID.SerializeToString,
            deepstream__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMainImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/UpdateMainImage',
            deepstream__service__pb2.CameraID.SerializeToString,
            deepstream__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateROI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/UpdateROI',
            deepstream__service__pb2.ROI.SerializeToString,
            deepstream__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMainImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/GetMainImage',
            deepstream__service__pb2.CameraID.SerializeToString,
            deepstream__service__pb2.MainImage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCameraStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/GetCameraStatus',
            deepstream__service__pb2.CameraID.SerializeToString,
            deepstream__service__pb2.CameraStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCameraStatusList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/GetCameraStatusList',
            deepstream__service__pb2.Empty.SerializeToString,
            deepstream__service__pb2.CameraStatusList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/InsertFace',
            deepstream__service__pb2.FaceItem.SerializeToString,
            deepstream__service__pb2.InsertStatusReponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/RemoveFace',
            deepstream__service__pb2.FaceID.SerializeToString,
            deepstream__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFaceIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deepstream_service.DeepstreamService/GetFaceIDs',
            deepstream__service__pb2.Empty.SerializeToString,
            deepstream__service__pb2.FaceIDs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
